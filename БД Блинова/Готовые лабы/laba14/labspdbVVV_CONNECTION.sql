CREATE TABLE STUDENT (
    STUDENT_ID NUMBER PRIMARY KEY,
    LASTNAME   VARCHAR2(50),
    FIRSTNAME  VARCHAR2(50),
    BIRTHDATE  DATE,
    GROUPNAME  VARCHAR2(10)
);

INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (1, 'Иванов', 'Иван', TO_DATE('2003-05-12', 'YYYY-MM-DD'), 'ИСиТ1');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (2, 'Петрова', 'Анна', TO_DATE('2002-11-03', 'YYYY-MM-DD'), 'ПОИТ2');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (3, 'Сидоров', 'Максим', TO_DATE('2003-01-25', 'YYYY-MM-DD'), 'ИСиТ21');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (4, 'Кузнецова', 'Елена', TO_DATE('2001-09-10', 'YYYY-MM-DD'), 'ИСиТ2');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (5, 'Новикова', 'Мария', TO_DATE('2002-03-14', 'YYYY-MM-DD'), 'ПОИТ21');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (6, 'Волков', 'Алексей', TO_DATE('2003-07-18', 'YYYY-MM-DD'), 'ИСиТ22');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (7, 'Морозов', 'Дмитрий', TO_DATE('2002-12-30', 'YYYY-MM-DD'), 'ИСиТ21');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (8, 'Федорова', 'Ольга', TO_DATE('2001-06-07', 'YYYY-MM-DD'), 'ПОИТ20');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (9, 'Алексеев', 'Никита', TO_DATE('2002-04-01', 'YYYY-MM-DD'), 'ИСиТ21');
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME) VALUES (10, 'Смирнова', 'Дарья', TO_DATE('2003-08-19', 'YYYY-MM-DD'), 'ИСиТ22');
COMMIT;

CREATE OR REPLACE TRIGGER trg_before_stud_op
BEFORE INSERT OR DELETE OR UPDATE ON STUDENT
BEGIN
  DBMS_OUTPUT.PUT_LINE('Сработал триггер: trg_before_stud_op (BEFORE INSERT/DELETE/UPDATE)');
END;
/

CREATE OR REPLACE TRIGGER trg_student_bir
BEFORE INSERT OR DELETE OR UPDATE ON STUDENT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_BIR: добавляется студент с ID = ' || :NEW.STUDENT_ID);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_BIR: удаляется студент с ID = ' || :OLD.STUDENT_ID);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_BIR: обновляется студент с ID = ' || :OLD.STUDENT_ID);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_student_after_statement
AFTER INSERT OR DELETE OR UPDATE ON STUDENT
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_STATEMENT: Завершена операция INSERT в таблице STUDENT.');
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_STATEMENT: Завершена операция DELETE в таблице STUDENT.');
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_STATEMENT: Завершена операция UPDATE в таблице STUDENT.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_student_after_row
AFTER INSERT OR DELETE OR UPDATE ON STUDENT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_ROW: Вставлена строка STUDENT_ID = ' || :NEW.STUDENT_ID);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_ROW: Удалена строка STUDENT_ID = ' || :OLD.STUDENT_ID);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('TRG_STUDENT_AFTER_ROW: Обновлена строка STUDENT_ID = ' || :NEW.STUDENT_ID);
    END IF;
END;
/


 --8
CREATE TABLE AUDIT_LOG (
    OPERATION_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    OPERATION_TYPE VARCHAR2(10),
    TRIGGER_NAME VARCHAR2(50),
    DATA VARCHAR2(4000)
);

--9
CREATE OR REPLACE TRIGGER trg_before_stud_op
BEFORE INSERT OR UPDATE OR DELETE ON STUDENT
BEGIN
    DBMS_OUTPUT.PUT_LINE('Сработал триггер BEFORE STATEMENT: before_statement_students');

    IF INSERTING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('INSERT', 'before_statement_students', 'Операция вставки');
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('UPDATE', 'before_statement_students', 'Операция обновления');
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('DELETE', 'before_statement_students', 'Операция удаления');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_student_bir
BEFORE INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Сработал триггер BEFORE ROW: trg_student_bir');

    IF INSERTING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('INSERT', 'before_row_students', 'Новая запись: ' || :NEW.STUDENT_ID || ' ' || :NEW.LASTNAME);
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('UPDATE', 'before_row_students', 'Старая запись: ' || :OLD.STUDENT_ID || ' ' || :OLD.LASTNAME || '; Новая запись: ' || :NEW.STUDENT_ID || ' ' || :NEW.LASTNAME);
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('DELETE', 'before_row_students', 'Удаляемая запись: ' || :OLD.STUDENT_ID || ' ' || :OLD.LASTNAME);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_student_after_statement
AFTER INSERT OR UPDATE OR DELETE ON STUDENT
BEGIN
    DBMS_OUTPUT.PUT_LINE('Сработал триггер AFTER STATEMENT: trg_student_after_statement');

    IF INSERTING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('INSERT', 'after_statement_students', 'Операция вставки');
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('UPDATE', 'after_statement_students', 'Операция обновления');
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('DELETE', 'after_statement_students', 'Операция удаления');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_student_after_row
AFTER INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Сработал триггер AFTER ROW: trg_student_after_row');

    IF INSERTING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('INSERT', 'after_row_students', 'Новая запись: ' || :NEW.STUDENT_ID || ' ' || :NEW.LASTNAME);
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('UPDATE', 'after_row_students', 'Старая запись: ' || :OLD.STUDENT_ID || ' ' || :OLD.LASTNAME || '; Новая запись: ' || :NEW.STUDENT_ID || ' ' || :NEW.LASTNAME);
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG (OPERATION_TYPE, TRIGGER_NAME, DATA)
        VALUES ('DELETE', 'after_row_students', 'Удаляемая запись: ' || :OLD.STUDENT_ID || ' ' || :OLD.LASTNAME);
    END IF;
END;
/
 
 
INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME)
VALUES (1, 'Ivanov', 'Ivan', TO_DATE('2000-01-01', 'YYYY-MM-DD'), 'A1');



DROP TABLE STUDENT;

CREATE OR REPLACE TRIGGER prevent_drop_student
BEFORE DROP ON DATABASE
DECLARE
    v_sql_text ORA_NAME_LIST_T;
BEGIN
    IF ORA_DICT_OBJ_NAME = 'STUDENT' AND ORA_DICT_OBJ_TYPE = 'TABLE' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Удаление таблицы STUDENT запрещено!');
    END IF;
END;
/

DROP TABLE AUDIT_LOG;

ALTER TABLE STUDENT ADD IS_ACTIVE CHAR(1) DEFAULT 'Y';

CREATE OR REPLACE VIEW v_student AS
SELECT STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME
FROM STUDENT
WHERE IS_ACTIVE = 'Y';


CREATE OR REPLACE TRIGGER trg_v_student_update
INSTEAD OF UPDATE ON v_student
FOR EACH ROW
BEGIN
    -- Помечаем старую запись как неактивную
    UPDATE STUDENT
    SET IS_ACTIVE = 'N'
    WHERE STUDENT_ID = :OLD.STUDENT_ID;

    -- Добавляем новую версию записи
    INSERT INTO STUDENT (
        STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME, IS_ACTIVE
    ) VALUES (
        :NEW.STUDENT_ID, :NEW.LASTNAME, :NEW.FIRSTNAME, :NEW.BIRTHDATE, :NEW.GROUPNAME, 'Y'
    );
END;
/
UPDATE v_student
SET LASTNAME = 'Новиков'
WHERE STUDENT_ID = 1;

INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME)
VALUES (99, 'Тестов', 'Тест', DATE '2000-01-01', 'ИСиТ');

--15
DROP TRIGGER after_statement_demo;
DROP TRIGGER after_row_demo;
DROP TRIGGER before_row_demo;
DROP TRIGGER before_statement_demo;

CREATE OR REPLACE TRIGGER before_row_demo_1
BEFORE INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Выполняется BEFORE ROW триггер 1');
END;
/

CREATE OR REPLACE TRIGGER before_row_demo_2
BEFORE INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Выполняется BEFORE ROW триггер 2');
END;
/

INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME)
VALUES (100, 'Тестов', 'Тест', DATE '2000-01-01', 'ИСиТ')


CREATE OR REPLACE TRIGGER before_row_demo_2
BEFORE INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
FOLLOWS before_row_demo_1
BEGIN
    DBMS_OUTPUT.PUT_LINE('Выполняется BEFORE ROW триггер 2');
END;

INSERT INTO STUDENT (STUDENT_ID, LASTNAME, FIRSTNAME, BIRTHDATE, GROUPNAME)
VALUES (101, 'Тестов', 'Тест', DATE '2000-01-01', 'ИСиТ')

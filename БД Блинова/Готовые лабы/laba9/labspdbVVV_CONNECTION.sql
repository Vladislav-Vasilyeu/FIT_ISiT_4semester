CREATE GLOBAL TEMPORARY TABLE temp_orders (
    order_id NUMBER,
    client_name VARCHAR2(100),
    order_date DATE
) ON COMMIT PRESERVE ROWS;

-- Вставим данные
INSERT INTO temp_orders VALUES (1, 'Ivanov', SYSDATE);
INSERT INTO temp_orders VALUES (2, 'Petrov', SYSDATE);

-- Посмотрим, что записалось
SELECT * FROM temp_orders;

-- Выполни COMMIT и снова посмотри
COMMIT;
SELECT * FROM temp_orders;


CREATE SEQUENCE S1
    START WITH 1000
    INCREMENT BY 10
    NOMINVALUE
    NOMAXVALUE
    NOCYCLE
    NOCACHE
    NOORDER;
    
    
DROP SEQUENCE S1;
DROP SEQUENCE S2;
DROP SEQUENCE S3;
DROP SEQUENCE S4;


SELECT S1.NEXTVAL FROM dual;
SELECT S1.NEXTVAL FROM dual;
SELECT S1.NEXTVAL FROM dual;

SELECT S1.CURRVAL FROM dual;


CREATE SEQUENCE S2
    START WITH 10
    INCREMENT BY 10
    MAXVALUE 100
    NOCYCLE;
    
    
    
SELECT S2.NEXTVAL FROM dual;  -- 10
SELECT S2.NEXTVAL FROM dual;  -- 20
SELECT S2.NEXTVAL FROM dual;  -- 30
SELECT S2.NEXTVAL FROM dual;  -- 40
SELECT S2.NEXTVAL FROM dual;  -- 50
SELECT S2.NEXTVAL FROM dual;  -- 60
SELECT S2.NEXTVAL FROM dual;  -- 70
SELECT S2.NEXTVAL FROM dual;  -- 80
SELECT S2.NEXTVAL FROM dual;  -- 90
SELECT S2.NEXTVAL FROM dual;  -- 100


SELECT S2.NEXTVAL FROM dual;


CREATE SEQUENCE S3
    START WITH 10
    INCREMENT BY -10
    MINVALUE -100
    MAXVALUE 10
    NOCYCLE
    ORDER;

SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;
SELECT S3.NEXTVAL FROM dual;



CREATE SEQUENCE S4
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 10
    CYCLE
    CACHE 5
    NOORDER;

SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;
SELECT S4.NEXTVAL FROM dual;

SELECT sequence_name
FROM user_sequences;


CREATE TABLE T1 (
    N1 NUMBER(20),
    N2 NUMBER(20),
    N3 NUMBER(20),
    N4 NUMBER(20)
)
TABLESPACE users

ALTER TABLE T1
   STORAGE (BUFFER_POOL KEEP);


INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

INSERT INTO T1 (N1, N2, N3, N4)
VALUES (S1.NEXTVAL, S2.NEXTVAL, S3.NEXTVAL, S4.NEXTVAL);

SELECT * FROM T1;


CREATE CLUSTER ABC
    (X NUMBER(10), V VARCHAR2(12))
    HASH IS X
    HASHKEYS 200
    SIZE 200;

CREATE TABLE A (
    XA NUMBER(10),
    VA VARCHAR2(12),
    extra_column VARCHAR2(20) -- произвольный столбец
) CLUSTER ABC (XA, VA);


CREATE TABLE B (
    XB NUMBER(10),
    VB VARCHAR2(12),
    extra_column VARCHAR2(20) -- произвольный столбец
) CLUSTER ABC (XB, VB);

CREATE TABLE C (
    XC NUMBER(10),
    VC VARCHAR2(12),
    extra_column VARCHAR2(20) -- произвольный столбец
) CLUSTER ABC (XC, VC);

SELECT table_name FROM user_tables;
SELECT cluster_name FROM user_clusters;
SELECT table_name, cluster_name FROM user_tables
WHERE cluster_name = 'ABC';

CREATE SYNONYM MY_CYN FOR VVV.C
SELECT * FROM MY_CYN

CREATE PUBLIC SYNONYM PUB_SYN FOR VVV.B


CREATE TABLE TABLE1 (
    id_a NUMBER PRIMARY KEY,
    name_a VARCHAR2(50)
);

CREATE TABLE TABLE2 (
    id_b NUMBER PRIMARY KEY,
    id_a_ref NUMBER,
    name_b VARCHAR2(50),
    CONSTRAINT fk_id_a FOREIGN KEY (id_a_ref) REFERENCES TABLE1(id_a)
);
drop table table1

-- В TABLE1
INSERT INTO TABLE1 VALUES (1, 'Alice');
INSERT INTO TABLE1 VALUES (2, 'Bob');

-- В TABLE2 (ссылаемся на id_a из TABLE1)
INSERT INTO TABLE2 VALUES (101, 1, 'Project A');
INSERT INTO TABLE2 VALUES (102, 2, 'Project B');

CREATE VIEW V1 AS
SELECT
    t1.id_a,
    t1.name_a,
    t2.id_b,
    t2.name_b
FROM
    TABLE1 t1
INNER JOIN
    TABLE2 t2 ON t1.id_a = t2.id_a_ref;
    
    SELECT * FROM V1;


CREATE MATERIALIZED VIEW MV_VVV
BUILD IMMEDIATE
REFRESH COMPLETE
START WITH SYSDATE
NEXT SYSDATE + NUMTODSINTERVAL(2, 'MINUTE') -- каждые 2 минуты
AS
SELECT
    t1.id_a,
    t1.name_a,
    t2.id_b,
    t2.name_b
FROM
    table1 t1
INNER JOIN
    table2 t2 ON t1.id_a = t2.id_a_ref;



DROP MATERIALIZED VIEW MV_VVV


CREATE DATABASE LINK link_to_user2
  CONNECT TO user2 IDENTIFIED BY user2pass
  USING '(DESCRIPTION=
           (ADDRESS=(PROTOCOL=TCP)(HOST=192.168.0.25)(PORT=1521))
           (CONNECT_DATA=(SERVICE_NAME=ORCL))
         )';


SELECT * FROM dual@link_to_user2;

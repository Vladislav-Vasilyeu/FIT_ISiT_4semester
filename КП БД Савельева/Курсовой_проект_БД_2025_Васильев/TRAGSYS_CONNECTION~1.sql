-- Таблица пользователей
CREATE TABLE AppUsers (
    UserId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FullName VARCHAR2(100),
    Email VARCHAR2(100) UNIQUE,
    PasswordHash VARCHAR2(200),
    Role VARCHAR2(50)
);

-- Таблица туров
CREATE TABLE Tours (
    TourId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Title VARCHAR2(150) NOT NULL,
    Description CLOB,
    Price NUMBER(10, 2) NOT NULL,
    StartDate DATE,
    EndDate DATE
);

-- Таблица бронирований
CREATE TABLE Bookings (
    BookingId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UserId NUMBER REFERENCES AppUsers(UserId),
    TourId NUMBER REFERENCES Tours(TourId),
    BookingDate DATE DEFAULT SYSDATE,
    Status VARCHAR2(50) DEFAULT 'Pending'
);

-- Таблица маршрутов
CREATE TABLE TourRoutes (
    RouteId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TourId NUMBER REFERENCES Tours(TourId),
    Location VARCHAR2(150),
    DayNumber NUMBER
);


-- Таблица отелей
CREATE TABLE Hotels (
    HotelId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100),
    Address VARCHAR2(200),
    Stars NUMBER(1) CHECK (Stars BETWEEN 1 AND 5)
);


-- Таблица отзывов
CREATE TABLE TourReviews (
    ReviewId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TourId NUMBER REFERENCES Tours(TourId),
    UserId NUMBER REFERENCES AppUsers(UserId),
    Rating NUMBER(1) CHECK (Rating BETWEEN 1 AND 5),
    ReviewComment CLOB,
    ReviewDate DATE DEFAULT SYSDATE
);


-- Таблица оплат
CREATE TABLE Payments (
    PaymentId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BookingId NUMBER REFERENCES Bookings(BookingId),
    Amount NUMBER(10, 2) NOT NULL,
    PaymentDate DATE DEFAULT SYSDATE,
    PaymentMethod VARCHAR2(50)
);


CREATE TABLE TourHotels (
    TourId NUMBER REFERENCES Tours(TourId),
    HotelId NUMBER REFERENCES Hotels(HotelId),
    PRIMARY KEY (TourId, HotelId)
);

CREATE TABLE Messages (
    MessageId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SenderId NUMBER REFERENCES AppUsers(UserId),
    ReceiverId NUMBER REFERENCES AppUsers(UserId),
    Content CLOB,
    SentAt DATE DEFAULT SYSDATE
);


show con_name
SELECT * FROM USER_SYS_PRIVS;
SELECT * FROM USER_ROLE_PRIVS;

CREATE TABLE TestCreate (
    ID NUMBER PRIMARY KEY,
    Name VARCHAR2(50)
);



CREATE OR REPLACE PROCEDURE MakeBooking (
    p_UserId IN NUMBER,
    p_TourId IN NUMBER
) AS
BEGIN
    INSERT INTO Bookings (UserId, TourId, BookingDate, Status)
    VALUES (p_UserId, p_TourId, SYSDATE, 'Pending');
END;


CREATE OR REPLACE PROCEDURE ConfirmBookingPayment (
    p_BookingId IN NUMBER,
    p_Amount IN NUMBER,
    p_Method IN VARCHAR2
) AS
BEGIN
    UPDATE Bookings
    SET Status = 'Confirmed'
    WHERE BookingId = p_BookingId;

    INSERT INTO Payments (BookingId, Amount, PaymentMethod, PaymentDate)
    VALUES (p_BookingId, p_Amount, p_Method, SYSDATE);
END;

CREATE OR REPLACE PROCEDURE CancelBooking (
    p_BookingId IN NUMBER
) AS
BEGIN
    UPDATE Bookings
    SET Status = 'Cancelled'
    WHERE BookingId = p_BookingId;
END;


CREATE OR REPLACE PROCEDURE LeaveReview (
    p_UserId IN NUMBER,
    p_TourId IN NUMBER,
    p_Rating IN NUMBER,
    p_Comment IN CLOB
) AS
BEGIN
    INSERT INTO TourReviews (TourId, UserId, Rating, ReviewComment, ReviewDate)
    VALUES (p_TourId, p_UserId, p_Rating, p_Comment, SYSDATE);
END;


CREATE OR REPLACE FUNCTION GetAverageTourRating (
    p_TourId IN NUMBER
) RETURN NUMBER IS
    v_AvgRating NUMBER;
BEGIN
    SELECT AVG(Rating)
    INTO v_AvgRating
    FROM TourReviews
    WHERE TourId = p_TourId;

    RETURN v_AvgRating;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;


CREATE OR REPLACE FUNCTION GetUserBookingCount (
    p_UserId IN NUMBER
) RETURN NUMBER IS
    v_Count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_Count
    FROM Bookings
    WHERE UserId = p_UserId;

    RETURN v_Count;
END;

CREATE OR REPLACE FUNCTION GetTourRevenue (
    p_TourId IN NUMBER
) RETURN NUMBER IS
    v_Revenue NUMBER;
BEGIN
    SELECT SUM(P.Amount)
    INTO v_Revenue
    FROM Payments P
    JOIN Bookings B ON P.BookingId = B.BookingId
    WHERE B.TourId = p_TourId;

    RETURN NVL(v_Revenue, 0);
END;


CREATE OR REPLACE VIEW View_BookingDetails AS
SELECT
    B.BookingId,
    B.BookingDate,
    B.Status AS BookingStatus,
    U.FullName AS ClientName,
    T.ShortTitle AS TourName,
    T.Price,
    T.StartDate,
    T.EndDate
FROM Bookings B
JOIN AppUsers U ON B.UserId = U.UserId
JOIN Tours T ON B.TourId = T.TourId;


CREATE OR REPLACE VIEW View_PaymentSummary AS
SELECT
    P.PaymentId,
    P.PaymentDate,
    P.Amount,
    P.PaymentMethod,
    B.BookingId,
    U.FullName AS ClientName
FROM Payments P
JOIN Bookings B ON P.BookingId = B.BookingId
JOIN AppUsers U ON B.UserId = U.UserId;


CREATE OR REPLACE VIEW View_TourReviewsExtended AS
SELECT
    R.ReviewId,
    R.Rating,
    R.ReviewComment,
    R.ReviewDate,
    U.FullName AS Reviewer,
    T.ShortTitle AS Tour
FROM TourReviews R
JOIN AppUsers U ON R.UserId = U.UserId
JOIN Tours T ON R.TourId = T.TourId;

CREATE OR REPLACE TRIGGER trg_UpdateTourRating
AFTER INSERT ON TourReviews
FOR EACH ROW
BEGIN
    UPDATE Tours
    SET Rating = (
        SELECT ROUND(AVG(Rating))
        FROM TourReviews
        WHERE TourId = :NEW.TourId
    )
    WHERE TourId = :NEW.TourId;
END;


CREATE TABLE BookingStatusLog (
    LogId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BookingId NUMBER,
    OldStatus VARCHAR2(50),
    NewStatus VARCHAR2(50),
    ChangedAt DATE DEFAULT SYSDATE
);


CREATE OR REPLACE TRIGGER trg_LogBookingStatusChange
BEFORE UPDATE OF Status ON Bookings
FOR EACH ROW
WHEN (OLD.Status != NEW.Status)
BEGIN
    INSERT INTO BookingStatusLog (BookingId, OldStatus, NewStatus)
    VALUES (:OLD.BookingId, :OLD.Status, :NEW.Status);
END;


CREATE OR REPLACE TRIGGER trg_DefaultReviewRating
BEFORE INSERT ON TourReviews
FOR EACH ROW
BEGIN
    IF :NEW.Rating IS NULL THEN
        :NEW.Rating := 3;
    END IF;
END;


CREATE ROLE client_role;

GRANT SELECT ON Tours TO client_role;
GRANT SELECT ON TourRoutes TO client_role;
GRANT SELECT ON Hotels TO client_role;
GRANT SELECT ON TourImages TO client_role;

GRANT SELECT, INSERT ON Bookings TO client_role;
GRANT SELECT, INSERT ON Payments TO client_role;
GRANT SELECT, INSERT ON TourReviews TO client_role;
GRANT SELECT, INSERT ON Messages TO client_role;


CREATE ROLE manager_role;

GRANT SELECT, INSERT, UPDATE, DELETE ON Bookings TO manager_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON Payments TO manager_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON Tours TO manager_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON TourRoutes TO manager_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON TourHotels TO manager_role;
GRANT SELECT, INSERT, UPDATE, DELETE ON TourImages TO manager_role;
GRANT SELECT, INSERT, UPDATE ON TourReviews TO manager_role;
GRANT SELECT, INSERT, UPDATE ON Messages TO manager_role;

CREATE ROLE admin_role;

GRANT ALL PRIVILEGES TO admin_role;



CREATE USER user_client IDENTIFIED BY client123
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA UNLIMITED ON users;

GRANT CONNECT TO user_client;
GRANT client_role TO user_client;


CREATE USER user_manager IDENTIFIED BY manager123
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA UNLIMITED ON users;

GRANT CONNECT TO user_manager;
GRANT manager_role TO user_manager;


CREATE USER user_admin IDENTIFIED BY admin123
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA UNLIMITED ON users;

GRANT CONNECT, DBA TO user_admin;
GRANT admin_role TO user_admin;

--заполнение
--
--
BEGIN
  FOR i IN 1..1000 LOOP
    INSERT INTO AppUsers (FullName, Email, PasswordHash, Role)
    VALUES (
      'Пользователь ' || i,
      'user' || i || '@mail.com',
      'passhash' || i,
      CASE
        WHEN MOD(i, 20) = 0 THEN 'Manager'
        WHEN MOD(i, 50) = 0 THEN 'Admin'
        ELSE 'Client'
      END
    );
  END LOOP;
  COMMIT;
END;
/

BEGIN
  FOR i IN 1..100 LOOP
    INSERT INTO Tours (
      ShortTitle, FullTitle, Description, Price,
      StartDate, EndDate, Rating, IsAvailable,
      Discount, Country, CategoryId
    ) VALUES (
      'Тур №' || i,
      'Полное описание тура №' || i,
      'Это демонстрационный тур номер ' || i,
      TRUNC(DBMS_RANDOM.VALUE(500, 3000), 2),
      SYSDATE + DBMS_RANDOM.VALUE(1, 60),
      SYSDATE + DBMS_RANDOM.VALUE(61, 120),
      TRUNC(DBMS_RANDOM.VALUE(3, 6)),
      1,
      TRUNC(DBMS_RANDOM.VALUE(0, 25), 2),
      CASE MOD(i, 5)
        WHEN 0 THEN 'Италия'
        WHEN 1 THEN 'Испания'
        WHEN 2 THEN 'Греция'
        WHEN 3 THEN 'Турция'
        ELSE 'ОАЭ'
      END,
      MOD(i, 5) + 1 -- Предполагаем, что TourCategories уже содержит 5 записей
    );
  END LOOP;
  COMMIT;
END;
/

BEGIN
  FOR i IN 1..20000 LOOP
    INSERT INTO Bookings (
      UserId,
      TourId,
      BookingDate,
      Status
    ) VALUES (
      MOD(i, 1000) + 1, -- Пользователи от 1 до 1000
      MOD(i, 100) + 1,  -- Туры от 1 до 100
      SYSDATE - DBMS_RANDOM.VALUE(0, 365),
      CASE
        WHEN MOD(i, 4) = 0 THEN 'Pending'
        WHEN MOD(i, 4) = 1 THEN 'Confirmed'
        WHEN MOD(i, 4) = 2 THEN 'Cancelled'
        ELSE 'Completed'
      END
    );
  END LOOP;
  COMMIT;
END;


DECLARE
  v_min_user_id NUMBER;
  v_max_user_id NUMBER;
  v_min_tour_id NUMBER;
  v_max_tour_id NUMBER;
BEGIN
  SELECT MIN(UserId), MAX(UserId) INTO v_min_user_id, v_max_user_id FROM AppUsers;
  SELECT MIN(TourId), MAX(TourId) INTO v_min_tour_id, v_max_tour_id FROM Tours;

  FOR i IN 1..100000 LOOP
    INSERT INTO TourReviews (
      TourId,
      UserId,
      Rating,
      ReviewComment,
      ReviewDate
    ) VALUES (
      TRUNC(DBMS_RANDOM.VALUE(v_min_tour_id, v_max_tour_id + 1)),
      TRUNC(DBMS_RANDOM.VALUE(v_min_user_id, v_max_user_id + 1)),
      TRUNC(DBMS_RANDOM.VALUE(1, 6)),
      'Генерируемый отзыв №' || i,
      SYSDATE - DBMS_RANDOM.VALUE(0, 365)
    );

    IF MOD(i, 5000) = 0 THEN
      COMMIT;
    END IF;
  END LOOP;

  COMMIT;
END;
/


SELECT COUNT(*) FROM AppUsers;
SELECT COUNT(*) FROM Tours;

/



DECLARE
  v_min_user_id NUMBER;
  v_max_user_id NUMBER;
  v_min_tour_id NUMBER;
  v_max_tour_id NUMBER;
BEGIN
  -- Получаем реальные границы
  SELECT MIN(UserId), MAX(UserId) INTO v_min_user_id, v_max_user_id FROM AppUsers;
  SELECT MIN(TourId), MAX(TourId) INTO v_min_tour_id, v_max_tour_id FROM Tours;

  FOR i IN 1..20000 LOOP
    INSERT INTO Bookings (
      UserId,
      TourId,
      BookingDate,
      Status
    ) VALUES (
      TRUNC(DBMS_RANDOM.VALUE(v_min_user_id, v_max_user_id + 1)),
      TRUNC(DBMS_RANDOM.VALUE(v_min_tour_id, v_max_tour_id + 1)),
      SYSDATE - DBMS_RANDOM.VALUE(0, 365),
      CASE MOD(i, 4)
        WHEN 0 THEN 'Pending'
        WHEN 1 THEN 'Confirmed'
        WHEN 2 THEN 'Cancelled'
        ELSE 'Completed'
      END
    );
    
    IF MOD(i, 1000) = 0 THEN
      COMMIT;
    END IF;
  END LOOP;

  COMMIT;
END;
/


INSERT INTO TourReviews (TourId, UserId, Rating, ReviewComment, ReviewDate) VALUES
(2, 1, 5, 'Отличная поездка! Всё было организовано идеально.', SYSDATE);



DECLARE
  v_user_id AppUsers.UserId%TYPE;
  v_tour_id Tours.TourId%TYPE;
BEGIN
  FOR i IN 1..100000 LOOP
    -- Выбираем случайного пользователя
    SELECT UserId INTO v_user_id
    FROM (
      SELECT UserId FROM AppUsers
      ORDER BY DBMS_RANDOM.VALUE
    ) WHERE ROWNUM = 1;

    -- Выбираем случайный тур
    SELECT TourId INTO v_tour_id
    FROM (
      SELECT TourId FROM Tours
      ORDER BY DBMS_RANDOM.VALUE
    ) WHERE ROWNUM = 1;

    -- Вставляем отзыв
    INSERT INTO TourReviews (
      TourId,
      UserId,
      Rating,
      ReviewComment,
      ReviewDate
    ) VALUES (
      v_tour_id,
      v_user_id,
      TRUNC(DBMS_RANDOM.VALUE(1, 6)),
      'Отзыв №' || i,
      SYSDATE - DBMS_RANDOM.VALUE(0, 365)
    );

    IF MOD(i, 5000) = 0 THEN
      COMMIT;
    END IF;
  END LOOP;
  COMMIT;
END;


ALTER TRIGGER trg_UpdateTourRating DISABLE;

-- запуск генератора 100 000 отзывов

ALTER TRIGGER trg_UpdateTourRating ENABLE;

SELECT
  T.Country,
  TO_CHAR(P.PaymentDate, 'YYYY-MM') AS Month,
  SUM(P.Amount) AS TotalRevenue
FROM Payments P
JOIN Bookings B ON P.BookingId = B.BookingId
JOIN Tours T ON B.TourId = T.TourId
GROUP BY T.Country, TO_CHAR(P.PaymentDate, 'YYYY-MM')
ORDER BY T.Country, Month;






CREATE OR REPLACE PROCEDURE AddRouteToTour (
    p_TourId IN NUMBER,
    p_Location IN VARCHAR2,
    p_DayNumber IN NUMBER
) AS
BEGIN
    INSERT INTO TourRoutes (TourId, Location, DayNumber)
    VALUES (p_TourId, p_Location, p_DayNumber);
END;


CREATE OR REPLACE PROCEDURE AddHotel (
    p_Name IN VARCHAR2,
    p_Address IN VARCHAR2,
    p_Stars IN NUMBER
) AS
BEGIN
    INSERT INTO Hotels (Name, Address, Stars)
    VALUES (p_Name, p_Address, p_Stars);
END;

CREATE OR REPLACE PROCEDURE LinkHotelToTour (
    p_TourId IN NUMBER,
    p_HotelId IN NUMBER
) AS
BEGIN
    INSERT INTO TourHotels (TourId, HotelId)
    VALUES (p_TourId, p_HotelId);
END;

CREATE OR REPLACE PROCEDURE SendMessage (
    p_SenderId IN NUMBER,
    p_ReceiverId IN NUMBER,
    p_Content IN CLOB
) AS
BEGIN
    INSERT INTO Messages (SenderId, ReceiverId, Content, SentAt)
    VALUES (p_SenderId, p_ReceiverId, p_Content, SYSDATE);
END;

DROP PROCEDURE ADDTOUR

CREATE OR REPLACE PROCEDURE AddTour (
    p_ShortTitle   IN VARCHAR2,
    p_FullTitle    IN VARCHAR2,
    p_Description  IN CLOB,
    p_Price        IN NUMBER,
    p_StartDate    IN DATE,
    p_EndDate      IN DATE,
    p_IsAvailable  IN NUMBER,
    p_Discount     IN NUMBER,
    p_Country      IN VARCHAR2,
    p_CategoryId   IN NUMBER
)
IS
BEGIN
    INSERT INTO Tours (
        ShortTitle,
        FullTitle,
        Description,
        Price,
        StartDate,
        EndDate,
        Rating,
        IsAvailable,
        Discount,
        Country,
        CategoryId
    ) VALUES (
        -- предполагается, что есть последовательность TOUR_SEQ
        p_ShortTitle,
        p_FullTitle,
        p_Description,
        p_Price,
        p_StartDate,
        p_EndDate,
        NULL,            -- Rating изначально NULL
        p_IsAvailable,
        p_Discount,
        p_Country,
        p_CategoryId
    );
END;

CREATE OR REPLACE PROCEDURE AddTour (
    p_ShortTitle IN VARCHAR2,
    p_FullTitle IN VARCHAR2,
    p_Description IN CLOB,
    p_Price IN NUMBER,
    p_StartDate IN DATE,
    p_EndDate IN DATE,
    p_IsAvailable IN NUMBER,
    p_Discount IN NUMBER,
    p_Country IN VARCHAR2,
    p_CategoryId IN NUMBER,
    p_Rating IN NUMBER DEFAULT 0  -- добавляем!
) AS
BEGIN
    INSERT INTO Tours (
        ShortTitle, FullTitle, Description, Price, StartDate, EndDate,
        IsAvailable, Discount, Country, CategoryId, Rating
    ) VALUES (
        p_ShortTitle, p_FullTitle, p_Description, p_Price, p_StartDate, p_EndDate,
        p_IsAvailable, p_Discount, p_Country, p_CategoryId, p_Rating
    );
END;
/




CREATE TABLE temp_tours (
  SHORTTITLE   VARCHAR2(150),
  FULLTITLE    VARCHAR2(255),
  DESCRIPTION  CLOB,
  PRICE        NUMBER(10,2),
  STARTDATE    DATE,
  ENDDATE      DATE,
  RATING       NUMBER(3,0),
  ISAVAILABLE  NUMBER(1,0),
  DISCOUNT     NUMBER(5,2),
  COUNTRY      VARCHAR2(100),
  CATEGORYID   NUMBER
);




CREATE OR REPLACE PROCEDURE ImportToursFromTemp IS
BEGIN
  INSERT INTO Tours (
    SHORTTITLE, FULLTITLE, DESCRIPTION, PRICE, STARTDATE, ENDDATE,
    RATING, ISAVAILABLE, DISCOUNT, COUNTRY, CATEGORYID
  )
  SELECT 
    SHORTTITLE, FULLTITLE, DESCRIPTION, PRICE, STARTDATE, ENDDATE,
    RATING, ISAVAILABLE, DISCOUNT, COUNTRY, CATEGORYID
  FROM temp_tours;
  
  COMMIT;
END;

CREATE TABLE export_xml_log (
  id         NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  exportdate DATE,
  xmldata    CLOB
);

CREATE OR REPLACE PROCEDURE ExportToursToXML IS
  ctx  DBMS_XMLGEN.ctxhandle;
  xml  CLOB;
BEGIN
  ctx := DBMS_XMLGEN.newcontext('SELECT * FROM Tours');
  DBMS_XMLGEN.setrowsettag(ctx, 'Tours');
  DBMS_XMLGEN.setrowtag(ctx, 'Tour');
  xml := DBMS_XMLGEN.getxml(ctx);

  INSERT INTO export_xml_log (exportdate, xmldata)
  VALUES (SYSDATE, xml);

  DBMS_XMLGEN.closecontext(ctx);
  COMMIT;
END;


BEGIN
  FOR i IN 1..900000 LOOP
    INSERT INTO Tours (
      SHORTTITLE, FULLTITLE, DESCRIPTION, PRICE,
      STARTDATE, ENDDATE, RATING, ISAVAILABLE, DISCOUNT,
      COUNTRY, CATEGORYID
    ) VALUES (
      'ShortTitle ' || i,
      'FullTitle of Tour ' || i,
      'Description for Tour ' || i,
      ROUND(DBMS_RANDOM.VALUE(500, 5000), 2),
      SYSDATE + DBMS_RANDOM.VALUE(1, 30),
      SYSDATE + DBMS_RANDOM.VALUE(31, 60),
      MOD(i, 10),
      MOD(i, 2),
      ROUND(DBMS_RANDOM.VALUE(0, 30), 2),
      'Country ' || MOD(i, 5),
      MOD(i, 3) + 1
    );
  END LOOP;
  COMMIT;
END;

SET AUTOTRACE ON;
EXPLAIN PLAN FOR
SELECT * FROM Tours WHERE Country = 'Country 3';

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

SELECT INDEX_NAME, COLUMN_NAME
FROM USER_IND_COLUMNS
WHERE TABLE_NAME = 'TOURS';

BEGIN
  DBMS_STATS.GATHER_TABLE_STATS(ownname => 'TRAGSYS', tabname => 'TOURS');
END;



CREATE INDEX idx_tours_country ON Tours(Country);


SELECT * FROM Tours WHERE Country = 'Country 2';
select * from table(dbms_xplan.display_cursor(sql_id=>'bnmm81fz183nj', format=>'ALLSTATS LAST'));


SELECT /*+ INDEX(T Tours idx_tours_country) */ *
FROM Tours T
WHERE Country = 'Country 3';

ALTER TABLE Tours MODIFY Rating DEFAULT 0;


